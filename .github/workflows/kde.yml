# Via: https://github.com/jstrieb/ctf-collab/blob/main/.github/workflows/run-server-graphical.yml

name: Run Graphical RDP Environment (Ubuntu GNOME)

# Only run when manually triggered
on:
  workflow_dispatch:
    inputs:
      ngrok_token:
        description: Token to use for ngrok (optional)
        required: false


jobs:
  start_server:
    name: Set up and start the graphical remote server
    runs-on: ubuntu-20.04
    steps:
      - name: Change password
        run: |
          echo "runner:poepjes" | sudo chpasswd

      - name: Install (and upgrade) packages
        run: |
          sudo apt-get update
          # NOTE: upgrading takes way too long, and doesn't seem totally
          # necessary; hence it has been commented out
          # sudo apt-get --yes upgrade

          # NOTE: many of these are already installed; included for posterity
          # TODO: add other packages for CTF stuff
          PACKAGES=(
            binutils
            curl
            wget
            gcc
            tmux
            vim
            nmap
            htop
            gdb
            build-essential
            xterm
            sopwith  # Classic fun :)
          )
          sudo apt-get --yes install ${PACKAGES[@]}

          python -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --upgrade pip setuptools wheel

          PIP_PACKAGES=(
            pwntools
            ciphey
          )
          python3 -m pip install --upgrade ${PIP_PACKAGES[@]}

      - name: Install (and upgrade) graphical packages
        run: |
          PACKAGES=(
            kubuntu-desktop
            wireshark
          )
          sudo apt-get --yes install ${PACKAGES[@]}

          # Make sure the display manager is running after install
          sudo systemctl start sddm

          # Install IDA
          cd
          mkdir --parents Downloads
          cd Downloads
          wget \
            --quiet \
            --output-document idafree70_linux.run \
            "https://out7.hex-rays.com/files/idafree70_linux.run"
          chmod +x idafree70_linux.run
          ./idafree70_linux.run --mode unattended --installpassword ctf
          echo 'alias ida="~/idafree-7.0/ida64"' >> ~/.bashrc

          # Install Ghidra
          wget \
            --quiet \
            --output-document "ghidra.zip" \
            "https://ghidra-sre.org/ghidra_9.2_PUBLIC_20201113.zip"
          unzip ghidra.zip
          mv ghidra_9.2_PUBLIC ~/ghidra
          echo 'alias ghidra="~/ghidra/ghidraRun"' >> ~/.bashrc

   
      - name: Install RDP server
        run: |
          sudo apt --yes install xrdp
          sudo systemctl enable xrdp

      - name: Install Apache Guacamole
        run: |
          # Install Apache Guacamole server
          cd
          sudo apt-get install \
            libcairo2-dev \
            libjpeg-turbo8-dev \
            libpng-dev \
            libtool-bin \
            libossp-uuid-dev \
            freerdp2-dev \
            libpango1.0-dev \
            libssh2-1-dev \
            libssl-dev
          wget \
            --quiet \
            --output-document "guacamole-server-1.3.0.tar.gz" \
            "http://apache.org/dyn/closer.cgi?action=download&filename=guacamole/1.3.0/source/guacamole-server-1.3.0.tar.gz"
          tar -xzf guacamole-server-1.3.0.tar.gz
          cd guacamole-server-1.3.0
          ./configure
          make
          sudo make install
          sudo ldconfig

          # Install Apache guacamole authentication
          cd
          sudo mkdir -p /etc/guacamole
          echo '
          <user-mapping>
              <authorize username="runner" password="ctf">
                  <protocol>rdp</protocol>
                  <param name="hostname">localhost</param>
                  <param name="port">3389</param>
                  <param name="password">ctf</param>
              </authorize>
          </user-mapping>
          ' | sudo tee /etc/guacamole/user-mapping.xml
          guacd

          # Install Apache Tomcat to run Guacamole with, and Guacamole client
          sudo apt-get install \
            tomcat9 \
            default-jdk
          sudo wget \
            --quiet \
            --output-document "/var/lib/tomcat9/webapps/guacamole-1.3.0.war" \
            "http://apache.org/dyn/closer.cgi?action=download&filename=guacamole/1.3.0/binary/guacamole-1.3.0.war"
          sudo service tomcat9 restart || sudo service tomcat9 start

      - name: Install ngrok and run in the background as a daemon
        run: |
          # Only proceed if there is a user-supplied authtoken for ngrok.
          # Prefer one submitted with a workflow dispatch, but accept one
          # stored as a repository secret.
          NGROK_AUTHTOKEN="${{ github.event.inputs.ngrok_token }}"
          if [ -z "$NGROK_AUTHTOKEN" ]; then
            NGROK_AUTHTOKEN="${{ secrets.NGROK_TOKEN }}"
          fi
          if [ -z "$NGROK_AUTHTOKEN" ]; then
            echo ngrok authtoken required!
            exit 1
          fi

          # Add the authtoken to the ngrok configuration file
          echo "authtoken: $NGROK_AUTHTOKEN" >> ~/ngrok.yml

          # Download and install ngrok
          cd
          wget \
            --quiet \
            --output-document ngrok.zip \
            "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip"
          unzip ngrok.zip
          sudo mv ngrok /usr/local/bin/ngrok
          touch ~/ngrok.log

          # Run ngrok in the background as a daemon
          start-stop-daemon \
            --start \
            --background \
            --chdir ~/ctf \
            --exec /usr/local/bin/ngrok \
            -- \
              start \
              -config ~/ngrok.yml \
              rdp guac

      - name: Display connection information
        run: |
          echo Waiting for things to start up...
          sleep 20s

          echo
          echo When connecting, use username "'runner'" and password "'ctf'"
          echo

          # Print ngrok connection info (if applicable)
          NGROK_AUTHTOKEN="${{ github.event.inputs.ngrok_token }}"
          if [ -z "$NGROK_AUTHTOKEN" ]; then
            NGROK_AUTHTOKEN="${{ secrets.NGROK_TOKEN }}"
          fi
          if [ -n "$NGROK_AUTHTOKEN" ]; then
            echo "To connect using an RDP client:"
            cat ~/ngrok.log \
              | jq .url \
              | grep -v "null" \
              | tr -d '"' \
              | sed 's/tcp:\/\/\(.*\)/\1/g' \
              | sed 's/^http\(.*\)/http\1\/guacamole-1.3.0/g' \
              | sort
          fi

          # Wait... This process will be killed to end the Action. Return a
          # non-failure exit code in any case so that there are no unnecessary
          # notifications about a failed Actions workflow.
          sleep 6h || true


      - name: Clean up
        run: |
          echo Done!
